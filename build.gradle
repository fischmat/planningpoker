import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.CsvReportRenderer
import com.github.jk1.license.render.InventoryHtmlReportRenderer
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.jetbrains.kotlin.jvm' version '1.9.22'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.22'
	id 'jacoco'
	id 'com.github.jk1.dependency-license-report' version '2.5'
}

group = 'de.matthiasfisch'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	// Spring
	implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-websocket"
	implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
	implementation "org.springframework.session:spring-session-core"
	implementation "org.springframework.session:spring-session-data-mongodb"
	developmentOnly "org.springframework.boot:spring-boot-devtools"

	// SocketIO
	implementation "com.corundumstudio.socketio:netty-socketio:2.0.6"
	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		// JSONObject clashes with the one from org.json:json through io.socket:socket.io-client
		exclude group: 'com.vaadin.external.google', module: 'android-json'
	}

	// Scrimage
	def scrimageVersion = "4.1.1"
	implementation "com.sksamuel.scrimage:scrimage-core:${scrimageVersion}"
	implementation "com.sksamuel.scrimage:scrimage-formats-extra:${scrimageVersion}"
	implementation "com.sksamuel.scrimage:scrimage-webp:${scrimageVersion}"

	// http4k client
	implementation platform("org.http4k:http4k-bom:5.13.2.0")
	implementation "org.http4k:http4k-core"
	implementation "org.http4k:http4k-client-apache"

	// Utilities
	implementation "org.jetbrains.kotlin:kotlin-reflect"
	implementation "io.github.microutils:kotlin-logging-jvm:3.0.5"
	implementation "io.minio:minio:8.5.7"
	implementation "commons-codec:commons-codec:1.16.0"
	implementation "dev.failsafe:failsafe:3.3.2"

	// Testing
	def kotestVersion = "5.8.0"
	testImplementation "io.kotest:kotest-runner-junit5:${kotestVersion}"
	testImplementation "io.kotest:kotest-assertions-core:${kotestVersion}"
	testImplementation "io.kotest.extensions:kotest-extensions-spring:1.1.3"
	testImplementation "io.rest-assured:rest-assured:5.3.1"
	testImplementation "io.socket:socket.io-client:1.0.2"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.withType(KotlinCompile).configureEach {
	compilerOptions {
		freeCompilerArgs.add("-Xjsr305=strict")
		jvmTarget.set(JvmTarget.JVM_17)
	}
}

licenseReport {
	renderers = [new InventoryHtmlReportRenderer(), new CsvReportRenderer()]
	excludeBoms = true
	allowedLicensesFile = new File("$projectDir/config/allowed-licenses.json")
	filters = [new LicenseBundleNormalizer()]
}
build {
	dependsOn checkLicense
}